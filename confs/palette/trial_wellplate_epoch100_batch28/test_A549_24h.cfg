[Dataset]
dataset_name = JUMP
root_path = ./cellpainting-gallery/cpg0000-jump-pilot/source_4/images/2020_11_04_CPJUMP1
dataset_path = datasets/JUMP/build
input_channel_path = input_channel.txt
output_channel_path = output_channel.txt
channel_table_path = channel_table.json
split_list_test = split_list_wellplate_A549_24h/test_extracted_1_site_per_well.txt
image_size = (1080,1080)
resize = (256,256)
convert_gray = False
crop_size = None
crop_range = None
crop_augmentation = False
rotation_augmentation = True
balanced_batch_sampler = False
normalization = std
image_dtype = uint16
data_range = 65535
dim_match = True
input_dim_label = [[65535,0,0],[0,65535,0],[0,0,65535],[65535/2,0,65535/2],[0,65535/2,65535/2]]
table_label = [
            [0,   0,   65535],
            [0,   65535, 0  ],
            [65535, 0,   0  ],
            [65535, 65535, 0  ],
            [65535, 0,   65535],
              ]
num_workers = 4
pin_memory = True

[Model]
model = Palette
lossfun = nn.MSELoss()
model_dir = results/palette/*
in_channels = 3
out_channels  = 5
# Palleteのbeta schedule
schedule = linear
n_timestep = 2000
linear_start = 1e-6
linear_end = 0.01
sample_num = 8
task = None
# Metricsの設定
eval_metric = None
eval_maximize = None
pretrained = False
# restoration時にstatusを可視化するか否か
verbose = False

[Runtime]
save_dir = results/palette/trial_wellplate_epoch100_batch28/train_fold3_20240324-100652/test_A549_24h
val_batchsize = 1
device = cuda:1
# 生成した画像を保存するか否か
image_save = True
seed = 109
server = v104
phase = test